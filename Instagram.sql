create database Instagram;
use Instagram;

CREATE TABLE USER
(
  USER_ID INT NOT NULL,
  USER_NAME varchar(50) NOT NULL,
  EMAIL varchar(50) NOT NULL,
  PASSWORD varchar(50) NOT NULL,
  FIRST_NAME varchar(50),
  LAST_NAME varchar(50) ,
  PROFILE_PICTURE varchar(50),
  BIO varchar(50),
  DATE_of_BIRTH DATE,
  ACCOUNTED_CREATED DATE NOT NULL,
  STATUS varchar(50) NOT NULL,
  FOLLOWERS_COUNT INT ,
  PRIMARY KEY (USER_ID)
);

CREATE TABLE HASHTAG
(
  HASHTAG_ID INT NOT NULL,
  HASHTAG_TEXT varchar(50) ,
  PRIMARY KEY (HASHTAG_ID)
);

CREATE TABLE FOLLOWER
(
  FOLLOWER_ID INT NOT NULL,
  USER_ID INT,
  FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID)
);

CREATE TABLE TAG
(
  TAG_ID INT NOT NULL,
  TAG_NAME varchar(50) ,
  PRIMARY KEY (TAG_ID)
);

CREATE TABLE GROUPP
(
  GROUP_ID INT NOT NULL,
  GROUP_NAME varchar(50),
  DESCRIPTION varchar(50),
  CREATION_DATE DATE NOT NULL,
  STATUS varchar(50) NOT NULL,
  USER_ID INT,
  PRIMARY KEY (GROUP_ID),
  FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID)
);

CREATE TABLE LIVE_EVENT
(
  EVENT_ID INT NOT NULL,
  EVENT_NAME varchar(50),
  TIMESTAMP DATE NOT NULL,
  PRIMARY KEY (EVENT_ID)
);

CREATE TABLE ADS
(
  AD_ID INT NOT NULL,
  AD_CONTENT varchar(50) NOT NULL,
  STARTDATE DATE NOT NULL,
  ENDDATE DATE NOT NULL,
  PRIMARY KEY (AD_ID)
);

CREATE TABLE REACTIONS
(
  REACTION_ID INT NOT NULL,
  REACTIONTYPE varchar(50) NOT NULL,
  PRIMARY KEY (REACTION_ID)
);

CREATE TABLE NOTIFICATIONS
(
  NOTIFICATION_ID INT NOT NULL,
  TIMESTAMP timestamp NULL,
  USER_ID INT,
  PRIMARY KEY (NOTIFICATION_ID),
  FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID)
);

CREATE TABLE POLL
(
  POLL_ID INT NOT NULL,
  QUESTIONS varchar(250),
  PRIMARY KEY (POLL_ID)
);

CREATE TABLE ARCHIVE
(
  ARCHIVE_ID INT NOT NULL,
  TIMESTAMP timestamp NOT NULL,
  PRIMARY KEY (ARCHIVE_ID)
);

CREATE TABLE AdPerformanceMetrics
(
  METRIC_ID INT NOT NULL,
  REGION varchar(50) NOT NULL,
  INTERACTIONS varchar(50),
  AD_ID INT NOT NULL,
  PRIMARY KEY (METRIC_ID),
  FOREIGN KEY (AD_ID) REFERENCES ADS(AD_ID)
);

CREATE TABLE Live_EventInteraction
(
  INTERACTION_ID INT NOT NULL,
  RESPONSE VARCHAR(50),
  EVENT_ID INT NOT NULL,
  PRIMARY KEY (INTERACTION_ID),
  FOREIGN KEY (EVENT_ID) REFERENCES LIVE_EVENT(EVENT_ID)
);

CREATE TABLE NOTIFICATIONS_NOTIFICATION_TYPE
(
  NOTIFICATION_TYPE INT NOT NULL,
  NOTIFICATION_ID INT NOT NULL,
  PRIMARY KEY (NOTIFICATION_TYPE, NOTIFICATION_ID),
  FOREIGN KEY (NOTIFICATION_ID) REFERENCES NOTIFICATIONS(NOTIFICATION_ID)
);

CREATE TABLE POST
(
  POST_ID INT NOT NULL,
  CONTENT varchar(50),
  CAPTION varchar(50) ,
  TIMESTAMP timestamp NOT NULL,
  LIKES_COUNT INT,
  COMMENTS_COUNT INT,
  USER_ID INT,
  AD_ID INT NOT NULL,
  ARCHIVE_ID INT NOT NULL,
  PRIMARY KEY (POST_ID),
  FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID),
  FOREIGN KEY (AD_ID) REFERENCES ADS(AD_ID),
  FOREIGN KEY (ARCHIVE_ID) REFERENCES ARCHIVE(ARCHIVE_ID)
);

CREATE TABLE COMMENT
(
  COMMENT_ID INT NOT NULL,
  TEXT varchar(50) ,
  TIMESTAMP timestamp NOT NULL,
  POST_ID INT,
  PRIMARY KEY (COMMENT_ID),
  FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID)
);

CREATE TABLE LIKES
(
  LIKE_ID INT NOT NULL,
  POST_ID INT,
  PRIMARY KEY (LIKE_ID),
  FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID)
);

CREATE TABLE STORY
(
  STORY_ID INT NOT NULL,
  CONTENT varchar(50),
  TIMESTAMP timestamp,
  USER_ID INT,
  EVENT_ID INT NOT NULL,
  PRIMARY KEY (STORY_ID),
  FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID),
  FOREIGN KEY (EVENT_ID) REFERENCES LIVE_EVENT(EVENT_ID)
);

CREATE TABLE MESSAGE
(
  MESSAGE_ID INT NOT NULL,
  CONTENT varchar(50) ,
  TIMESTAMP timestamp,
  POLL_ID INT NOT NULL,
  PRIMARY KEY (MESSAGE_ID),
  FOREIGN KEY (POLL_ID) REFERENCES POLL(POLL_ID)
);

CREATE TABLE POST_HASHTAG
(
  POST_ID INT,
  HASHTAG_ID INT NOT NULL,
  FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID),
  FOREIGN KEY (HASHTAG_ID) REFERENCES HASHTAG(HASHTAG_ID)
);

CREATE TABLE REPORT
(
  REPORT_ID INT NOT NULL,
  POST_ID INT NOT NULL,
  TIMESTAMP timestamp,
  REASON varchar(50),
  PRIMARY KEY (REPORT_ID),
  FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID)
);

CREATE TABLE LIKES_POST
(
  USER_ID INT,
  LIKE_ID INT,
  PRIMARY KEY (USER_ID, LIKE_ID),
  FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID),
  FOREIGN KEY (LIKE_ID) REFERENCES LIKES(LIKE_ID)
);

CREATE TABLE COMMENTS
(
  USER_ID INT NOT NULL,
  COMMENT_ID INT NOT NULL,
  PRIMARY KEY (USER_ID, COMMENT_ID),
  FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID),
  FOREIGN KEY (COMMENT_ID) REFERENCES COMMENT(COMMENT_ID)
);

CREATE TABLE SENDS
(
  USER_ID INT NOT NULL,
  MESSAGE_ID INT NOT NULL,
  PRIMARY KEY (USER_ID, MESSAGE_ID),
  FOREIGN KEY (USER_ID) REFERENCES USER(USER_ID),
  FOREIGN KEY (MESSAGE_ID) REFERENCES MESSAGE(MESSAGE_ID)
);

CREATE TABLE POST_TAG
(
  POST_ID INT NOT NULL,
  TAG_ID INT NOT NULL,
  PRIMARY KEY (POST_ID, TAG_ID),
  FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID),
  FOREIGN KEY (TAG_ID) REFERENCES TAG(TAG_ID)
);

CREATE TABLE STORY_REACTION
(
  STORY_ID INT NOT NULL,
  REACTION_ID INT NOT NULL,
  PRIMARY KEY (STORY_ID, REACTION_ID),
  FOREIGN KEY (STORY_ID) REFERENCES STORY(STORY_ID),
  FOREIGN KEY (REACTION_ID) REFERENCES REACTIONS(REACTION_ID)
);
